Distributed Version Control
Fully mirror central repository locally

Every time you commit, or save the state of your project in Git
- snapshot taken of all files and stores reference to snapshot
- unchanged files just link to previous version

nearly every operation is local

ANY file change detected by git
mechanism called checksumming : SHA-1
SHA-1 is essentially key to git database

git has 3 main file states
- modified
  - changed but not commited to local database
- staged
  - modified file has been marked in it's current version to go into next commit snapshot
- commited
  - data safely stored in local database
  
git project has 3 main sections
- git directory
  - metadata and object database for project. Cloning creates this
- working directory
  - single checkout of 1 version of project
  - These files are pulled out of the compressed database in the Git directory and placed on disk for you to use or modify.
  - files in working directory are in 1 of 2 states
    - tracked : files in last snapshot? Can have status of modified, unmodified, staged
	- untracked : everything else
  - file status lifecycle:
    (untracked) -> add file -> (unmodified) -> edit file -> (modified) -> stage file -> (staged)
	                           (unmodified) <---------------------------- commit file <- (staged)
- staging area
  - details what goes into next commit
  
The basic Git workflow goes something like this:
- You modify files in your working directory.
- You stage the files, adding snapshots of them to your staging area.
- You do a commit, which takes the files as they are in the staging area and stores that snapshot permanently to your Git directory.

Help
====
git help

Config
======
git config --list
git config --list --show-origin


git config --global user.name "Steve Lambert"
git config --global user.email steve.lambert67@gmail.com

EOL considerations
==================
CR: ^M
LF: ^J

Windows uses CR LF at eol
Unix uses LF only

core.autocrlf true

file from git(unix) -> windows : LF -> CRLF
file from windows to git(unix) : CRLF -> LF

Create new git repository
=========================
git init creates git repo
- .git subdirectory created

Clone remote repository
=======================
git clone "repository url"

git remote show origin

Status
======
git status
- files not added to repo are marked as untracked

  changes to be committed
  -----------------------
  staged files
  
  changes not staged for commit
  -----------------------------
  tracked file has been modified but not yet staged

Add file to git repo
====================
git add <filename>
- file now tracked and staged (because listed under 'changes to be committed' after git status)

Remove file from repo - TO BE CONFIRMED
=====================
git rm --cached <file> -> remove from staging area and set to untracked
git rm : remove files and remove staging of files
The git -rm command removes the files from the repository for current HEAD only; previous revisions/commits will still have the file.
git reset -> unstage file. How different to git rm --cached?

Undo changes on branch
======================
git reset --hard HEAD
git checkout -- <file>

Renaming a file
===============
git mv <old name> <new name>

stage
=====
git add <filename>
- multi purpose - also used to add new file

git add -A adds all modified files

remove from stage
-----------------


commit
======
Every commit gives a snapshot of whole project

git commit -m "my commit message"
git commit -m "msg1" -m "msg2" -> multiline message
- commits staged changes
git status -> nothing to commit, working directory clean

details of most recent commit
-----------------------------
My most recent commit referred to as HEAD
git show
git show --name-only

Undo latest local commit
------------------------
git reset --soft HEAD^1

Amend latest commit
-------------------
git add <another file>
git commit --amend -m "updated message"

Differences
===========
eg - what have I changed but not staged? git diff
   - what have I staged and am about to commit? git diff --staged (or --cached)
   
git diff <commit#> <commit#>
git diff --name-only <commit#> <commit#>

- need to know differences between my local code and latest pull from repo - CONFIRM THIS
git diff HEAD
git diff -- staged
   
Project history
===============
git log 
-p : shows diffs
-n : limits commits shown
--oneline : compact version
-- graph : shows merges

gitk
- invokes graphical UI

Branching
=========
Simply a pointer to a commit in the commit history
HEAD : pointer to current local branch

  create new branch
  -----------------
  git branch <new branch>
  
  create new branch on the server
  -------------------------------
  create branch locally
  git push -u origin <branch>
  
  switch branches
  ---------------
  git checkout <branch>
  
  delete branch
  -------------
  git branch -d <branch>
  git branch -D <branch> to force removal of unmerged commits
  
  delete branch from server
  -------------------------
  git push origin --delete <branch>
  
  finding branch of commit
  ------------------------
  git branch --contains SHA1
  
Merging
=======
Merges a branch into current branch. Merges endpoints

  To find common ancestor of 2 
  ----------------------------
  git merge-base <branch> <branch>
 

  merge
  -----
  git merge <branch>
  --no-ff : ensure new merge commit even for fast forward merge
  --edit : allows overriding of merge commit message
  
  merge conflicts
  ---------------
  notepad+
  
  filewithconflict.txt
  a
  <<<<<<< HEAD
  c                : this is the master
  =======
  b                : this is the branch
  >>>>>>> mybranch
  
  manually edit conflict markers
  
  git add marks as resolved
  git commit
  
  merge conflicts with submodules
  -------------------------------
  TortoiseGit->Check for modifications
  Rclick-> resolve conflict using ours/theirs
  Checkout appropriate plugin commit if needed
  
  merge abort
  -----------
  git merge --abort
  
Rebasing
========
Rebasing replays changes from one line of work onto another in the order they were introduced
Gives a linear history

  rebase
  ------
  git rebase <destination>
  eg. git checkout mybranch
      git rebase master
	  resolve merge conflicts
	  git add <file>
	  git rebase --continue
	  
	  applies work on mybranch to master
	  still need to update master commit with fast forward merge
	  
	  git checkout master
	  git merge mybranch

Interactive rebasing - squashing commits
========================================
eg
git log (master)
m1
m2

git log (branch)
m1
m2
b1
b2
b3
b4

I want to squash the 4 branch commits into 1 commit

git rebase -i HEAD~4
'pick' 1st commit listed
'squash' rest of commits

Once this is done and saved, another editor pops up.
Edit the message as you see fit, then save and quit.
	  
	  
Stashing
========
Can't cleanly switch branches with messy working directory

  stash working directory
  -----------------------
  git stash
  
  view stash stack
  ----------------
  git stash list
  
  apply stash
  -----------
  git stash apply
  
  
Tagging
=======
  
  
Submodules
==========
We use Grails inline plugins
Submodules allow you to keep a Git repository as a subdirectory of another Git repository

To add git repository to plugins directory of current repository:
- git submodule add c:/MySandbox/MyOtherGitProject plugins
  - new file : plugins directory
  - new file : .gitmodules
  
git sees this plugins subdirectory as a submodule amd doesn't track it's contents
when you're not in that directory
Git records submodule as a particular commit from that repository
When you make changes and commit in that subdirectory, the superproject notices that the HEAD 
there has changed and records the exact commit you’re currently working off of; 
that way, when others clone this project, they can re-create the environment exactly
This is an important point with submodules: you record them as the exact commit they’re at

Cloning a project with submodules
=================================
  git clone
  - acquires all app code across all branches
  - submodule directory will be there but empty

Initialise local configuration file
-----------------------------------
  git submodule init
  
Fetch all the data from that project and check out the appropriate commit listed in your superproject
-----------------------------------------------------------------------------------------------------
  git submodule update
  - only takes effect on current branch
  
Move to app working branch
--------------------------
  git checkout <branch>
  
Retrieve submodule code for branch
----------------------------------
  git submodule update --init
  
Working plugin
--------------
  git checkout <branch>
  - may report that branch is behind a number of commits
  - app may be pointing to correct plugin commit in git DB but this branch needs to be updated

  git pull
  - may only need to pull from local git DB
  - but may pull from central repository if needed
  

  

  
  



   






