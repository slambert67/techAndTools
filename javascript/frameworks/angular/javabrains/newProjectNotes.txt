Prerequisites
=============

node.js
-------
runtime/dev environment
node -v

package manager
npm -v


ide
---
Visual Studio Code
- good typescript support


angular cli
-----------
ng v


Create new project
==================
ng new first-project


Test run
========
ng serve
- creates simple http server
- hosts angular project

invoke with http://localhost:4200/


Create new component
====================
ng generate component hello-world
- hello-world.component.ts/html/css/spec.ts
- updates app.module.ts


Use new component
=================
add new tag to existing html/view for root component
<app-hello-world></app-hello-world> - instantiates new hello-world component


Notes
=====
cli has created topmost component in tree for us
root component is rendering initial page - index.html
<app-root></app-root>
created in src/app
component view    => app.component.html & app.component.css
component logic   => app.component.ts
component testing => app.component.spec

Every component is a typescript class
Class needs to be registered as an angular component
- @Component decorator/metadata
- eg. selector, templateUrl, styleUrls etc
Data binding with {{}}
- view always reflects current value in related component class member variable
{{}} triggers interpolation/evaluation
- {{ myNum + 1 }} 
- or {{ myfunc(1,2) }}. myfunc assumed to be a member function of associated class (this keyword not needed)

loop: <p *ngFor="let phoneNumber of user.phone">{{phoneNumber}}</p>
- *ngFor is built in directive
If: <div *ngIf="user.phone.length > 0">
- actually conditionally removed div from dom

Component Lifecycle
- use of selector in markup creates instance of component class
- constructor executes
- Angular does things after object created
- eg. populating values with @Input decorator

Pass member variables to components : use [] in tag




