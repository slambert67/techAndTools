module has 3 parts
- imports (dependencies)
- the module code itself
- exports (module interface)


1. IIFE module pattern - power of closure. Access to variables out of function scope

2. CommonJS group - not built in modules
- browsers don't support out of the box
- baked into node
- designed with server in mind
- modules loaded synchronously
  - solved by module bundler. (1.js, 2.js) -> Bundler(e.g. webpack,browserify,SystemJS,rollup.js. Examines exports and requires) -> bundle.js
- require to import
- module.export to export. e.g. module.exports = <function name>
- Alternatives for client - AMD, UMD(try to supposr CJS and AMD) -> failed

3. ES Modules - built in modules
- browsers support ES modules
- baked into javascript language
- supports asynchronous loading
- import (instead of require) and export (instead of module.export)
- Node support being worked on. Progress?
  - .mjs. c.f. type=module in browser

e.g.
// msg.js
export default const msg = 'Yay ES6!';			import msg from './msg.js';

// lib.js
export const sum = (a,b) => a+b;				import * as lib from './lib.js';
export const product = (a,b) => a*b				import {sum,product}  from './lib.js';
export const quotient = (a,b) => a/b

in browser:
// add a module script
<script type="module" src="main.js"></script>

// fallback for older browsers
<script nomodule src="bundle.js"></script>



scripts included in html are not modules. Operate in global namespace
order of scripts matters



diy modules - name spacing
- yahoo global object
- jquery global object

