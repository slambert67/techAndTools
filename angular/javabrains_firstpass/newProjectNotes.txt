Prerequisites
=============

node.js
-------
runtime/dev environment
node -v

package manager
npm -v


ide
---
Visual Studio Code
- good typescript support


angular cli
-----------
ng v


Create new project
==================
ng new first-project


Test run
========
ng serve
- creates simple http server
- hosts angular project

invoke with http://localhost:4200/


Create new component
====================
ng generate component hello-world
ng generate component <module-name>/hello-world
- hello-world.component.ts/html/css/spec.ts
- updates app.module.ts


Use new component
=================
add new tag to existing html/view for root component
<app-hello-world></app-hello-world> - instantiates new hello-world component


Notes
=====
cli has created topmost component in tree for us
root component is rendering initial page - index.html
<app-root></app-root>
created in src/app
component view    => app.component.html & app.component.css
component logic   => app.component.ts
component testing => app.component.spec

Every component is a typescript class
Class needs to be registered as an angular component
- @Component decorator/metadata
- eg. selector, templateUrl, styleUrls etc
Data binding with {{}} : ONE WAY DATA BINDING
- view always reflects current value in related component class member variable
{{}} triggers interpolation/evaluation
- {{ myNum + 1 }} 
- or {{ myfunc(1,2) }}. myfunc assumed to be a member function of associated class (this keyword not needed)

loop: <p *ngFor="let phoneNumber of user.phone">{{phoneNumber}}</p>
- *ngFor is built in directive
If: <div *ngIf="user.phone.length > 0">
- actually conditionally removed div from dom
- *ngIf determines if element is in dom and rendered
- value in "user.phone.length > 0" used by angular (not me) so not considered to be data binding

Component Lifecycle
- use of selector in markup creates instance of component class
- constructor executes
- Angular does things after object created
- eg. populating values with @Input decorator

Pass member variables to components : use [] in tag

styles in css apply only to that component. Angular implements this by adding various attributes
root (in src folder) of angular project has styles.css in able to specify global styles

click=myfunc() => native HTML
(click)="myFunc()"  => angular takes care of click. myFunc resides in component.ts
TWO WAY DATA BINDING : view reflects back to model
[(ngModel)]="something"
Need to import FormsModule

View
[] <- Component
() -> Component

Module
- container/namespace
- contains different things
- build feature modules - groups of related components
- to create a module
  - ng generate module <name>
  - add ngModule annotation with passed in object
    - declarations : COMPONENTS that are part of MODULE
	- imports      : establishing dependency with other MODULES
	- exports      : COMPONENTS that can be used by other MODULES (cf private v public)
	- providers    : SERVICES that are part of MODULE
	
// typescript imports
import { NgModule } from '@angular/core';

// angular imports
imports: [CommonModule]

Not all reusable code is associated with a view  - Service
@Injectable annotation - tells angular this class is a service
CLI does not add service to a particular module - this is a manual task
Add to ngModule providers
Service now available for other components to use (dependency injection)
constructor(private myServiceInstance: TestService) {}
- service is injected into component
- angular knows about dependent services
- private is a shortcut
  - creates a member variable and assigns injected service to that variable

Services/providers are in a shared space and available to all modules
- this shared space known as Dependency Injection Context

So why specify service in a module provider?
Lazy Loading

Built in services


Extra notes
===========
1 way data binding
{{}} & [] are used to bind a property to the dom. ie component -> view
[] property binding











