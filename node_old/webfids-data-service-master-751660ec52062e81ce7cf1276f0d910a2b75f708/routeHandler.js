let promiseReflect = require('promise-reflect');
let getServiceUrl = require('get-service-url');
let apiDependencies = require('./api-dependencies');
let serverConfig = require('./server.config');
let pkg = require('./package.json');
let aimsApiHandler = require('./apiHandlers/aimsApiHandler');
let apexApiHandler = require('./apiHandlers/apexApiHandler');
let brsApiHandler  = require('./apiHandlers/brsApiHandler');

let getLoggerOptions = () => {
  return {
    callingService: pkg.name,
    loglevel: serverConfig.loglevel,
    postLogsToLogService: serverConfig.postLogsToLogService,
    urlToPostTo: serverConfig.postLogsToLogService ? getServiceUrl(apiDependencies, 'log-service', `api/logs`) : null
  };
};

let logger = require('strawman-logger')(getLoggerOptions());


const healthcheck = (req, res) => {
    res.header('Cache-Control', 'no-cache, no-store, max-age=0');
    res.end('OK');
};

//Healthchecks all of the underlying data-apis and returns an error
//if ANY of the underlying apis return an error
const underlyingApisHealthcheck = (req, res) => {

    const healthCheckPromisesArray = [
        aimsApiHandler.healthcheck(req, res),
        apexApiHandler.healthcheck(req, res),
        brsApiHandler.healthcheck(req, res)
    ];

    //Note that Promise.all is fail-fast - if one Promise rejects, then all responses are discarded
    //If this is not the desired behaviour, use a reflect function as done in the resilientUnderlyingApisHealthcheck
    Promise.all(healthCheckPromisesArray)
        .then(values => {
            logger.debug('Values: ' + values);
            const message = 'All healthchecks returned successfully';
            res.send(message);
        })
        .catch(error => {
            const errorMessage = error.system + ': ' + error.message;
            res.send(Error(errorMessage));
        });
};

//Healthchecks all of the underlying data-apis.
//Returns an object indicating the state of each of the underlying subsystems
//Returns status of 200 unless ALL of the underlying apis have errored.
const resilientUnderlyingApisHealthcheck = (req, res) => {

    const healthCheckPromisesArray = [
        aimsApiHandler.healthcheck(req, res),
        apexApiHandler.healthcheck(req, res),
        brsApiHandler.healthcheck(req, res)
    ];

    Promise.all(healthCheckPromisesArray.map(promiseReflect))
        .then(results => {
            const message = {};
            message.successes = results.filter(result => result.status === 'resolved');
            message.errors = results.filter(result => result.status === 'rejected');

            //If there is at least one success
            if (message.successes && message.successes.length > 0) {
                //Return message with HTTP 200
                res.send(message);
            }
            else {
                //Return message with HTTP 500
                res.send(500, message);
            }
        })
        .catch(error => {
            logger.debug('Should never get here as promiseReflect always resolves?');
            res.send(Error(error));
        });
};

const getPageDataByKey = (req, res) => {

    aimsApiHandler.getPageDataByKey(req, res)
    .then(result => {
      req.logger.trace({data: result}, 'KeyPage select succeeded');

      if (result && result.length > 0) {

        let pageDataArray = [];
        /*The Javascript result object already contains JSON as this is generated by the database
          so simply calling res.send on it will re-stringify an object that is already JSON. To prevent this
          extract each Javascript object from the resultset array, PARSE each object,
          build a new array of these objects and pass the array to res.send which will stringify it
          into valid JSON on the way out.
        */
        result.forEach(row => {
          pageDataArray.push(row);
        });
        res.send(201, pageDataArray);
      }
      else
      {
        //No data found
        res.send(204);
      }
    })
      .catch(error => {
      req.logger.error({err: error}, 'KeyPage select failed');
      res.send(error.statusCode, error);
    });
};

const getPageTemplateByKey = (req, res) => {

  aimsApiHandler.getPageTemplateByKey(req, res)
    .then(result => {
      req.logger.trace({data: result}, 'KeyPage select succeeded');

      if (result) {
        res.send(201, result);
      }
      else
      {
        //No data found
        res.send(204);
      }
    })
    .catch(error => {
      req.logger.error({err: error}, 'KeyPage select failed');
      res.send(error.statusCode, error);
    });
};

const getCurrentPageForDevice = (req, res) => {

  aimsApiHandler.getCurrentPageForDevice(req, res)
    .then(result => {
      req.logger.trace({data: result}, 'Page number by device lookup succeeded');

      if (result) {
        res.send(201, result);
      }
      else
      {
        //No page configured for this device found
        res.send(204);
      }
    })
    .catch(error => {
      req.logger.error({err: error}, 'Page number by device lookup failed');
      res.send(error.statusCode, error);
    });
};

module.exports = {
    'resilientUnderlyingApisHealthcheck': resilientUnderlyingApisHealthcheck,
    'underlyingApisHealthcheck': underlyingApisHealthcheck,
    'healthcheck': healthcheck,
    'getPageDataByKey': getPageDataByKey,
    'getPageTemplateByKey': getPageTemplateByKey,
    'getCurrentPageForDevice': getCurrentPageForDevice
};
