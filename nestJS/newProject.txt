My Project
==========
mongo database
	admin users												done
		id: number
		name: string
		password: string
	family members	me, julie, andy
		id: number
		firstName: string
		lastName: string
		relationship: string
	


Auth module for admin users
rest endpoints												partial
graphql endpoints 	src/cats/cats.resolver.ts
DTOs														partial
unit testing
logging
track activity
middleware - add surname for search
pipes - validation											partial
exception filters
guards
interceptors
configuration
websockets
kafka


=====

Questions
=========
Use of forRoot, register, forFeature - something to do with dynamic modules
@InjectRepository and @InjectModel play equivalent roles in NestJS, but they expose different abstractions because TypeORM uses Repositories and Mongoose uses Models.


Notes
=====
Ch05 .env
PORT=3001
MONGODB_URL=mongodb://localhost:27017/account-microservice2



Create new NestJS project
=========================
Install NestJS globally
	npm install -g @nestjs/cli
	
Create new NestJS application
	nest new my-family-app
	
Execute new NestJS project
	npm run start:dev
	
Test initial endpoint
	localhost:3000
	
Database Setup 
	@nestjs/mongoose - The NestJS module that integrates Mongoose into the Nest ecosystem (e.g., MongooseModule.forRoot(), @Schema(), @Prop() decorators).
	mongoose		 - The actual ODM (Object Data Modeling) library that connects to MongoDB and performs database operation
	npm i --save @nestjs/mongoose mongoose
	
Update app.module
	import { MongooseModule } from '@nestjs/mongoose';
	imports: [MongooseModule.forRoot('mongodb://localhost/nest')],
	

Create db module
	see code
	

Create Swagger
	npm install --save @nestjs/swagger
	
	main.ts
		  const config = new DocumentBuilder()
			.setTitle('Admin example')
			.setDescription('The Admin API description')
			.setVersion('1.0')
			.addTag('admin')
			.build();
		  const documentFactory = () => SwaggerModule.createDocument(app, config);
		  SwaggerModule.setup('api', app, documentFactory);
		  
	localhost:3000/api
	

Add Class Validation
	npm i --save class-validator class-transformer
	ValidationPipe
		global or per route
		BadRequestException if fails
		Use to validate controller dto
		main.ts
			  app.useGlobalPipes(
				new ValidationPipe({
				  whitelist: true,              // strip unknown fields
				  //forbidNonWhitelisted: true,   // throw if unknown fields are present
				  transform: true,              // auto-transform to DTO instances
				})
			  );
	

Add Authentication
	npm install --save @nestjs/jwt
	nest g module auth
	nest g controller auth
	nest g service auth
	
	





