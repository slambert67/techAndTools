prerequisites
-------------
Install node. This installs npm


create a new project
--------------------
npm init -y : create package.json. -y => no questions to answer
Actually creating a new npm package
Think of as meta data about project being developed
Default entry point : index.js


which npm version
-----------------
npm -v


install and use a library
-------------------------
npm install <module/dependency> 
e.g. npm install moment (a date & time library)
- node_modules folder created. Currently contains moment.js etc
- dependencies object in package.json updated with moment specified as a dependency

index.js can now use require to use moment.js functionality
let moment = require('moment');

npm install -D <module> : dev dependency

Packages installed at top level of hierarchy
Installed at lower level if need to be overridden


node_modules
------------
Delete before transferring to others
Other dev just types: npm install
- looks at package.json
- identifies dependencies
- pulls down all the code into node_modules


package.json
------------
"scripts" object used to define aliases (or scripts to run)
e.g. "start":"node index.js"
invoke: npm start
start and test are reserved names for lifecycle scripts

personal script invoked differently
e.g.
"myscript":"ls"
npm run myscript


versioning
----------
0.0.0 format
majorRelease.minorRelease.patchRelease

patchRelease
- bug fixes
- ~

minorRelease
- other
- ^

majorRelease
- breaks the API


package-lock.json
- automatically generated by npm when a package is installed
- records exact versions
- needs to be committed


npm install <newPkg>
->
dependencies {
  newPkg:^1.2.0
}

^ : most recent minor version
compatible dependencies allowed


Because
- npm install loads specified package version
- but versions no more recent than in package-lock.json


npm update
- installs latest minor versions where ^ is used
- installs latest patch versions where ~ is used
- and then updates package-lock.json


Eureka!
package-lock.json not needed in ideal world where semantic versioning is used perfectly by everyone



